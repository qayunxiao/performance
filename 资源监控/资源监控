被测服务：

  CPU:top
    时间片，即CPU分配给各个程序的时间，每个程序被分批一个时间段，称时间片
    用户CPU：是所有程序运行时消耗的CPU
    系统CPU：是操作系统运行时消耗的CPU

    查看top，用户CPU和系统CPU及空闲CPU占比
    当CPU使用率高，确定是用户cpu还是系统cpu高
    如果是用户cpu高，说明程序的CPU系统占用高，需要定位代码运行效率
    如果是系统cpu高，同步观察是否其它资源（磁盘IO,内存，网络等）不足

  内存：vmstat
    分实际和虚拟内存，程序运行必须加载到内存中才能运行
    虚拟内存，一种虚拟化技术，当内存空间不足，从磁盘中读入数据，处理完成之后写回磁盘，以此
    进行交换，保证内存不足时候，程序也可以运行。
    虚拟内存实际上完成了数据在磁盘和内存之间的读写过程，磁盘的速度要远远慢于内存 ，因此当使用
    虚拟内存时，说明内存不足，可能存在问题。
    当vmstat的 swap不为0 表示使用了虚拟内存
    关注：实际内存，查看内存使用百分比，检查是否超过80%
        虚拟内存，查看swap是否为0，如果不是0，说明内存可能不足


  磁盘：iostat -x 1 1
    磁盘input和output 和 %util值高说明磁盘长时间占有CPU在发送数据，磁盘传输速度不足 存在瓶颈

  网络瓶颈：sar -n DEV 1 2
    rxkB/s 每秒接受的数据量（千字节数），txkB/s 每秒发送的数据量（千字节数）
    传输速度，与网络的总带宽进行对比，接近总带宽，说明网络存在瓶颈

  中间件：
      mysql：
        慢查询日志：压测过程查看慢查询日志内容结合后端程序log
            show  variables like "slow_query%" ;
            #设置开启
            SET GLOBAL slow_query_log=ON;
            #默认是10
            set global long_query_time = 1

        数据库连接池：
            查看方法：
                  show variables like "max_connections"; #连接池配置
                  show STATUS like "threads_connected" #当前链接数
            允许应用程序重复使用现有的数据库连接，而不是重新建立。 2.当连接完毕后，连接池会将该连接回收，并交付其他的线程使用。 3.减少创建和断开数据库连接的次数，提高数据库的访问效率。
            Python数据库连接池DBUtils（基于pymysql模块连接数据库）
            关注，利用率=当前使用的连接数/最大连接数的比例，建议85%左右
            超过85%，连接池可能被占满，如果利用率过底，说明资源存在浪费，可能会存在其它性能问题

        锁：80%是行锁
            查看方法：
                show open tables WHERE in_use >= 1; #查询当前正在使用的标，可能存在锁表
                show processlist ;
                kill process_id 62;
            一个用户修改数据时，对该数据进行加锁操作，其它用户不能进行修改
            只有当第一个用户修改完之后，其它用户才能进行修改

            种类：
              表锁：开销小，加锁快，不会出现死锁，锁定粒度最大，并发度最低
              行锁：开销打，加锁慢，会出现死锁，锁定粒度最小，并发度最高，可能会产生死锁

      Java：
          JVM内存：java虚拟机管理java运行时，所管理的内存
          栈内存：一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配
          堆内存：存储动态数据，创建对象时申请的空间，给程序员使用
          一个java虚拟机实例只存在一个堆空间，所有线程都共享这个堆。
                程序并不会主动去释放它，堆空间的管理都是由垃圾收集器来处理的。
                堆内存用来保存java中创建出来的对象。
          非堆内存：存储静态，供JVM运行使用
          查看方法：jvisualvm.exe
          1、在程序启动命令中加上JVM监控的参数（IP+Port）
          2、打开Jvisualvm
          3、添加远程主机、添加JMX监控
          4、进入监控页面
              重点关注JVM CPU使用情况 和 堆内存的使用情况


压测机：
    JMeter单机负载能力有限，如果需要模拟的用户请求超过负载极限，也会导致TPS压不上去
    监控方法：windows 使用任务管理器  linux压测机：PerFMon 或者 top 命令